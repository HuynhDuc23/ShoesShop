package com.huynhduc.application.security;

import io.jsonwebtoken.Claims;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.WebUtils;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class JwtRequestFillter extends OncePerRequestFilter {

    @Autowired
    private JwtTokenUtil jwtTokenUtil;


    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {
        //L·∫•y token t·ª´ cookie
        String token;
        Cookie cookie = WebUtils.getCookie(httpServletRequest, "JWT_TOKEN");
        if (cookie != null) {
            token = cookie.getValue();
        } else {
            filterChain.doFilter(httpServletRequest, httpServletResponse);
            return;
        }

        // Parse th√¥ng tin t·ª´ token
        Claims claims = jwtTokenUtil.getClaimsFromToken(token);
        if (claims == null) {
            filterChain.doFilter(httpServletRequest, httpServletResponse);
            return;
        }

        // T·∫°o object Authentication
        UsernamePasswordAuthenticationToken authenticationToken = getAuthentication(claims);
        if (authenticationToken == null) {
            filterChain.doFilter(httpServletRequest, httpServletResponse);
            return;
        }

        // X√°c th·ª±c th√†nh c√¥ng, l∆∞u object Authentication v√†o SecurityContextHolder
        SecurityContextHolder.getContext().setAuthentication(authenticationToken);
        filterChain.doFilter(httpServletRequest, httpServletResponse);
    }

    private UsernamePasswordAuthenticationToken getAuthentication(Claims claims) {
        String username = claims.getSubject();

        if (username != null) {
            UserDetails user = userDetailsService.loadUserByUsername(username);
            return new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
        }
        return null;
    }
}
// üß© Vai Tr√≤ c·ªßa OncePerRequestFilter
//OncePerRequestFilter l√† m·ªôt l·ªõp ti·ªán √≠ch trong Spring ƒë·∫£m b·∫£o r·∫±ng filter ch·ªâ ƒë∆∞·ª£c th·ª±c thi m·ªôt l·∫ßn cho m·ªói y√™u c·∫ßu HTTP, ngay c·∫£ khi y√™u c·∫ßu ƒë∆∞·ª£c chuy·ªÉn ti·∫øp ho·∫∑c bao g·ªìm nhi·ªÅu l·∫ßn. ƒêi·ªÅu n√†y gi√∫p tr√°nh vi·ªác th·ª±c thi l·∫∑p l·∫°i c√°c logic x√°c th·ª±c ho·∫∑c ki·ªÉm tra b·∫£o m·∫≠t, ƒë·∫£m b·∫£o hi·ªáu su·∫•t v√† t√≠nh nh·∫•t qu√°n trong x·ª≠ l√Ω y√™u c·∫ßu.
